import argparse
from model import load_model, predict, build_explanation
from config import VALUE_CATEGORIES


def normalize_top_predictions(results, top_n=5):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Ç–æ–ø-N —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π (–≤ —Å—É–º–º–µ 100%)."""
    top_results = results[:top_n]
    total = sum(score for _, score in top_results)
    if total == 0:
        return [(label, 0.0) for label, _ in top_results]
    return [(label, round((score / total) * 100, 2)) for label, score in top_results]


def print_response(text, tokenizer, model, device, top_n=5):
    print("\nüìù –í–∞—à —Ç–µ–∫—Å—Ç:", text)

    print("\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    results = predict(text, tokenizer, model, device)
    top_normalized = normalize_top_predictions(results, top_n=top_n)

    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
    explanation, keywords = build_explanation(text, tokenizer, model, device, top_n=top_n)

    # –í—ã–≤–æ–¥
    print("\nüìä –¢–æ–ø-—Ü–µ–Ω–Ω–æ—Å—Ç–∏:")
    for label, percent in top_normalized:
        print(f"  - {label}: {percent}%")

    print("\nüìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    for word, score in keywords:
        print(f"  - {word}: –≤–∞–∂–Ω–æ—Å—Ç—å {round(score, 2)}")

    print("\nüß†", explanation)
    print()


def main():
    parser = argparse.ArgumentParser(description="–ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç–µ")
    parser.add_argument('--text', type=str, help='–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--top_n', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π')
    parser.add_argument('--model_path', type=str, default=None, help='–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)')

    args = parser.parse_args()

    tokenizer, model, device = load_model(args.model_path)

    if args.text:
        print_response(args.text, tokenizer, model, device, top_n=args.top_n)
    else:
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî Ctrl+C):")
        try:
            while True:
                user_text = input(">>> ")
                if user_text.strip():
                    print_response(user_text.strip(), tokenizer, model, device, top_n=args.top_n)
        except KeyboardInterrupt:
            print("\n–í—ã—Ö–æ–¥.")


if __name__ == "__main__":
    main()
